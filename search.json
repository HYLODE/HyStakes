[
  {
    "objectID": "vignettes/hello-world.html",
    "href": "vignettes/hello-world.html",
    "title": "HyStakes",
    "section": "",
    "text": "Use this to confirm that your set-up is working. It should open and run from within VSCode, and it should be using the hystakes kernel.\n\nprint('Hello World!')\n\nHello World!"
  },
  {
    "objectID": "vignettes/uclh-working-with-star.html",
    "href": "vignettes/uclh-working-with-star.html",
    "title": "HyStakes",
    "section": "",
    "text": "A template JupyterNotebook for working with EMAP. The following features of this notebook, and associated files are documented here to minimise the risk of data leaks or other incidents.\n\nUsernames and passwords are stored in a .env file that is excluded from version control. An example file is found at ./.env.example (which is tracked and shared via version control).\n.gitattributes are set to strip JupyterNotebook cells when pushing to GitHub\n\n\n\nLoad libraries\n\nimport os\nfrom dotenv import load_dotenv\nfrom pathlib import Path\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom sqlalchemy import create_engine\n\n\n\n\nLoad environment variables and set-up SQLAlchemy connection engine for the EMAP Star\n\nload_dotenv(dotenv_path=\"../.env\")\ntry:\n    assert os.getenv(\"DOTENV_FILE_EXISTS\") == 'TRUE'\nexcept AssertionError:\n    print(\"!!! ERROR: check that the .env file exists at the top level of the project\")\n    print(\"!!! ERROR: check that the relative path is correct\")\n\n\n# Construct the PostgreSQL connection\nuds_host = os.getenv('EMAP_DB_HOST')\nuds_name = os.getenv('EMAP_DB_NAME')\nuds_port = os.getenv('EMAP_DB_PORT')\nuds_user = os.getenv('EMAP_DB_USER')\nuds_passwd = os.getenv('EMAP_DB_PASSWORD')\n\nemapdb_engine = create_engine(f'postgresql://{uds_user}:{uds_passwd}@{uds_host}:{uds_port}/{uds_name}')\n\n\n\n\nNow use the connection to work with EMAP.\nFor example, let’s inspect patients currently in ED or Resus.\nHere’s the SQL:\n-- Example script \n-- to pick out patients currently in A&E resus or majors\n\nSELECT\n   vd.location_visit_id\n  ,vd.hospital_visit_id\n  ,vd.location_id\n  -- ugly HL7 location string \n  ,lo.location_string\n  -- time admitted to that bed/theatre/scan etc.\n  ,vd.admission_datetime\n  -- time discharged from that bed\n  ,vd.discharge_datetime\n\nFROM star.location_visit vd\n-- location label\nINNER JOIN star.location lo ON vd.location_id = lo.location_id\nWHERE \n-- last few hours\nvd.admission_datetime > NOW() - '12 HOURS'::INTERVAL    \n-- just CURRENT patients\nAND\nvd.discharge_datetime IS NULL\n-- filter out just ED and Resus or Majors\nAND\n-- unpacking the HL7 string formatted as \n-- Department^Ward^Bed string\nSPLIT_PART(lo.location_string,'^',1) = 'ED'\nAND\nSPLIT_PART(lo.location_string,'^',2) ~ '(RESUS|MAJORS)'\n-- sort\nORDER BY lo.location_string\n;\nThe SQL script is stored at ../utils/queries/current_bed.sql.\nWe can load the script, and read the results into a Pandas dataframe.\n\n# Read the sql file into a query 'q' and the query into a dataframe\nq = Path('../utils/queries/current_bed.sql').read_text()\ndf = pd.read_sql_query(q, emapdb_engine)\n\n\ndf.head()\n\n\n\n\n\n  \n    \n      \n      location_visit_id\n      hospital_visit_id\n      location_id\n      location_string\n      admission_datetime\n      discharge_datetime\n    \n  \n  \n    \n      0\n      613736208\n      613676720\n      63389334\n      ED^COVID MAJORS 16^16-COVID MAJORS\n      2022-09-07 20:46:00+00:00\n      None\n    \n    \n      1\n      613733664\n      613689488\n      63718482\n      ED^COVID MAJORS 17^17-COVID MAJORS\n      2022-09-07 20:37:00+00:00\n      None\n    \n    \n      2\n      613685490\n      613589609\n      63420067\n      ED^COVID MAJORS 18^18-COVID MAJORS\n      2022-09-07 18:18:00+00:00\n      None\n    \n    \n      3\n      613757998\n      613692079\n      63407429\n      ED^COVID MAJORS 21^21-COVID MAJORS\n      2022-09-07 21:40:00+00:00\n      None\n    \n    \n      4\n      613681437\n      613632092\n      63318380\n      ED^NON COVID MAJORS 01^01-NON COVID MAJORS\n      2022-09-07 18:08:00+00:00\n      None\n    \n  \n\n\n\n\n\n\n\nA series of three scripts\n\nSimply pull hospital visits\nAdd in hospital numbers (MRN) and handle patient merges\nAdd in patient demographics\n\n\n\nSELECT\n   vo.hospital_visit_id\n  ,vo.encounter\n  -- admission to hospital\n  ,vo.admission_datetime\n  ,vo.arrival_method\n  ,vo.presentation_datetime\n  -- discharge from hospital\n  -- NB: Outpatients have admission events but not discharge events\n  ,vo.discharge_datetime\n  ,vo.discharge_disposition\n\n-- start from hospital visits\nFROM star.hospital_visit vo\nWHERE \n      -- hospital visits within the last 12 hours\n      vo.presentation_datetime > NOW() - '12 HOURS'::INTERVAL   \n      -- emergencies\n  AND vo.patient_class = 'EMERGENCY'\n      -- attending via ambulance\n  AND vo.arrival_method = 'Ambulance'\n      -- sort descending\nORDER BY vo.presentation_datetime DESC\n; \n\n# Read the sql file into a query 'q' and the query into a dataframe\nq = Path('../utils/queries/hospital_visit_1.sql').read_text()\ndf = pd.read_sql_query(q, emapdb_engine)\n\ndf.head()\n\n\n\n\n\n  \n    \n      \n      hospital_visit_id\n      encounter\n      admission_datetime\n      arrival_method\n      presentation_datetime\n      discharge_datetime\n      discharge_disposition\n    \n  \n  \n    \n      0\n      613772881\n      1038395529\n      NaT\n      Ambulance\n      2022-09-07 23:05:00+00:00\n      NaT\n      None\n    \n    \n      1\n      613769053\n      1038395490\n      2022-09-07 22:44:00+00:00\n      Ambulance\n      2022-09-07 22:39:00+00:00\n      NaT\n      None\n    \n    \n      2\n      613766922\n      1038395451\n      2022-09-07 22:30:00+00:00\n      Ambulance\n      2022-09-07 22:27:00+00:00\n      NaT\n      None\n    \n    \n      3\n      613762284\n      1038395406\n      2022-09-07 22:08:00+00:00\n      Ambulance\n      2022-09-07 22:06:00+00:00\n      NaT\n      None\n    \n    \n      4\n      613760103\n      1038395372\n      2022-09-07 21:57:00+00:00\n      Ambulance\n      2022-09-07 21:54:00+00:00\n      NaT\n      None\n    \n  \n\n\n\n\n\n\n\nSee the series of joins in the middle of the script that retrieve the live MRN. That is we recognise that patients may have had an episode of care with one MRN, and then that episode was merged with another historical MRN. One of those two MRNs will then become the ‘live’ MRN and can be used to trace the patient across what otherwise would be different identities.\nSELECT\n   vo.hospital_visit_id\n  ,vo.encounter\n  ,vo.admission_datetime\n  ,vo.arrival_method\n  ,vo.presentation_datetime\n  ,vo.discharge_datetime\n  ,vo.discharge_disposition\n  -- original MRN\n  ,original_mrn.mrn AS original_mrn\n  -- live MRN\n  ,live_mrn.mrn AS live_mrn\n\n-- start from hospital visits\nFROM star.hospital_visit vo\n-- get original mrn\nINNER JOIN star.mrn original_mrn ON vo.mrn_id = original_mrn.mrn_id\n-- get mrn to live mapping \nINNER JOIN star.mrn_to_live mtl ON vo.mrn_id = mtl.mrn_id \n-- get live mrn \nINNER JOIN star.mrn live_mrn ON mtl.live_mrn_id = live_mrn.mrn_id \n\nWHERE \n      -- hospital visits within the last 12 hours\n      vo.presentation_datetime > NOW() - '12 HOURS'::INTERVAL   \n      -- emergencies\n  AND vo.patient_class = 'EMERGENCY'\n      -- attending via ambulance\n  AND vo.arrival_method = 'Ambulance'\n      -- sort descending\nORDER BY vo.presentation_datetime DESC\n; \n\n# Read the sql file into a query 'q' and the query into a dataframe\nq = Path('../utils/queries/hospital_visit_2.sql').read_text()\ndf = pd.read_sql_query(q, emapdb_engine)\n\ndf.head()\n\n\n\n\nSELECT\n   vo.hospital_visit_id\n  ,vo.encounter\n  ,vo.admission_datetime\n  ,vo.arrival_method\n  ,vo.presentation_datetime\n  ,vo.discharge_datetime\n  ,vo.discharge_disposition\n  -- original MRN\n  ,original_mrn.mrn AS original_mrn\n  -- live MRN\n  ,live_mrn.mrn AS live_mrn\n\n  -- core demographics\n  ,cd.date_of_birth\n  -- convert dob to age in years\n  ,date_part('year', AGE(cd.date_of_birth)) AS age\n  ,cd.sex\n  ,cd.home_postcode\n  -- grab initials from first and last name\n  ,CONCAT(LEFT(cd.firstname, 1), LEFT(cd.lastname, 1)) AS initials\n\n-- start from hospital visits\nFROM star.hospital_visit vo\nINNER JOIN star.core_demographic cd ON vo.mrn_id = cd.mrn_id\n\n-- get original mrn\nINNER JOIN star.mrn original_mrn ON vo.mrn_id = original_mrn.mrn_id\n-- get mrn to live mapping \nINNER JOIN star.mrn_to_live mtl ON vo.mrn_id = mtl.mrn_id \n-- get live mrn \nINNER JOIN star.mrn live_mrn ON mtl.live_mrn_id = live_mrn.mrn_id \n\nWHERE \n      -- hospital visits within the last 12 hours\n      vo.presentation_datetime > NOW() - '12 HOURS'::INTERVAL   \n      -- emergencies\n  AND vo.patient_class = 'EMERGENCY'\n      -- attending via ambulance\n  AND vo.arrival_method = 'Ambulance'\n      -- sort descending\nORDER BY vo.presentation_datetime DESC\n; \n\n# Read the sql file into a query 'q' and the query into a dataframe\nq = Path('../utils/queries/hospital_visit_3.sql').read_text()\ndf = pd.read_sql_query(q, emapdb_engine)\n\ndf.head()"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "HyStakes",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "index.html#section-1",
    "href": "index.html#section-1",
    "title": "HyStakes",
    "section": "Section 1",
    "text": "Section 1\nsome text"
  },
  {
    "objectID": "index.html#section-2",
    "href": "index.html#section-2",
    "title": "HyStakes",
    "section": "Section 2",
    "text": "Section 2\nsome more text"
  },
  {
    "objectID": "vignettes/vignettes.html",
    "href": "vignettes/vignettes.html",
    "title": "Vignettes",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nExample Jupyter Notebook\n\n\n\n\n\n\nWorking with EMAP star\n\n\n\n\n\n\n\n\nNo matching items"
  }
]